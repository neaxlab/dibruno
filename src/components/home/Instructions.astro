---
import { Bullet } from '../ui/buttons/Bullet';
import ButtonSlide from '../ui/buttons/ButtonSlide';
import InstructionsCarousel from '../commons/instructionsCarousel';
import { getProductByTitle } from '../../utils/shopify';

// Orden y títulos exactos de Shopify
const productTitles = [
  'ShieldMist Spray (5% Procapil)',
  'RootPure Shampoo⁠ (5% Procapil)',
  'VitaLush Serum (5% Procapil)',
  'SproutMist Spray (5% Procapil)',
  'RootFlourish Mask (5% Procapil)'
];


const buyerIP = Astro.request.headers.get('x-forwarded-for') || '127.0.0.1';
const productsLite = await Promise.all(
  productTitles.map(async (title) => {
    try {
      const p = await getProductByTitle({ title, buyerIP });
      return { title: p?.title || title, handle: p?.handle || '', howToUse: p?.howToUse || null, image: p?.featuredImage?.url || '' };
    } catch {
      return { title, handle: '', howToUse: null };
    }
  })
);
const instructions = Object.fromEntries(
  productsLite.map((p, idx) => [
    String(idx + 1),
    {
      url: p.handle ? `/products/${p.handle}` : '#',
      image: '/images/products/dibrunoShampoo.png',
      alt: p.title,
      // recomendations: '',
      instructions: [] as any[],
    }
  ])
);
---

<script define:vars={{ instructions, productsLite }}>
    window.instructions = instructions;
    window.productsLite = productsLite;
</script>


<>
<section class="sm:flex hidden max-w-screen-2xl mx-auto font-sans sm:pb-section-d-gap-y pt-4 pb-section-m-gap-y flex-col gap-10">
    <div class="w-full relative" id="instructions-container">
        <img src="/images/home/instructions.avif" alt="Instructions" class="w-full h-full object-cover" id="instructions-image" />
        
        <!-- Bullet 1 - Posición relativa a la imagen -->
        <div class="absolute flex flex-col gap-10 w-fit h-fit bullet cursor-pointer" 
             id="bullet-1"
             data-index="1">
            <Bullet />
        </div>
        
        <!-- Bullet 2 - Posición relativa a la imagen -->
        <div class="absolute flex flex-col gap-10 w-fit h-fit bullet cursor-pointer" 
             id="bullet-2"
             data-index="2">
            <Bullet />
        </div>

        <div class="absolute flex flex-col gap-10 w-fit h-fit bullet cursor-pointer" 
             id="bullet-5"
             data-index="5">
            <Bullet />
        </div>
        
        <!-- Bullet 3 - Posición relativa a la imagen -->
        <div class="absolute flex flex-col gap-10 w-fit h-fit bullet cursor-pointer" 
             id="bullet-3"
             data-index="3">
            <Bullet />
        </div>
        
        <!-- Bullet 4 - Posición relativa a la imagen -->
        <div class="absolute flex flex-col gap-10 w-fit h-fit bullet cursor-pointer" 
             id="bullet-4"
             data-index="4">
            <Bullet />
        </div>
        
        <!-- Bullet 5 - Posición relativa a la imagen -->
        
        
       
        <div class="fixed top-10 left-0 w-full h-full z-10 hidden ingredients">
            <div class="w-full h-full bg-primary-olive opacity-20 ingredients-fill"></div>
            <div class="absolute top-0 right-0 flex flex-col gap-10 bg-primary-bright w-[684px] h-full text-primary-olive p-10 ingredients-panel">
                <div class="flex flex-row justify-between items-center">
                    <h1 class="text-d-title-1">HOW TO USE?</h1>
                    <img src="/images/home/close-icon.svg" alt="Close" class="cursor-pointer rotate-45 size-11 hover:rotate-[135deg] transition-all duration-500 ingredients-close" />
                </div>
                <div class="flex flex-col gap-10" id="instructions-content">
                </div>
                <!-- <div class="flex flex-col gap-6">
                    <h1 class="text-d-title-2">RECOMMENDATIONS:</h1>
                    <p class="text-d-products text-primary-granite font-normal" id="instructions-recomendations"></p>
                </div> -->
                <ButtonSlide
                    text="LEARN MORE ABOUT THE PRODUCT"
                    href="#"
                    normalBackground="transparent"
                    normalColor="#3B3B3B"
                    hoverBackground="#3B3B3B"
                    hoverColor="#FAFAFA"
                    borderColor="#3B3B3B"
                    hoverBorderColor="#FAFAFA"
                    transitionDuration="0.5s"
                    className="w-full flex justify-center instructions-btn"
                />
            </div>
    
        </div> 
    </div>

</section>

<InstructionsCarousel productsLite={productsLite} client:load />
</>
<script>
    (function registerDelegation() {
        const instructions = (window as any).instructions || [];

        const bulletPositions = [
            { top: 25, left: 27.5 },
            { top: 28, left: 38 },
            { top: 32, left: 47.6 },
            { top: 28, right: 40 },
            { top: 35, right: 31 },
        ];

        const positionBullets = () => {
            const container = document.getElementById('instructions-container');
            const image = document.getElementById('instructions-image');
            
            if (!container || !image) return;

            const containerRect = container.getBoundingClientRect();
            const imageRect = image.getBoundingClientRect();
            
            // Calcular el offset de la imagen dentro del contenedor
            const offsetX = imageRect.left - containerRect.left;
            const offsetY = imageRect.top - containerRect.top;
            
            // Aplicar posiciones a cada bullet
            bulletPositions.forEach((position, index) => {
                const bullet = document.getElementById(`bullet-${index + 1}`);
                if (!bullet) return;

                let left, top;
                
                if (position.left !== undefined) {
                    left = offsetX + (imageRect.width * position.left / 100);
                } else if (position.right !== undefined) {
                    left = offsetX + imageRect.width - (imageRect.width * position.right / 100);
                }
                
                top = offsetY + (imageRect.height * position.top / 100);
                
                bullet.style.left = `${left}px`;
                bullet.style.top = `${top}px`;
                bullet.style.transform = 'translate(-50%, -50%)';
            });
        };

        const renderInstructions = async (index: number) => {
            const instructionsContent = document.getElementById('instructions-content');
            if (!instructionsContent) return;

            const idx = index - 1;
            const productsLite = (window as any).productsLite || [];
            const product = productsLite[idx];
            if (!product) return;

            // howToUse.content puede contener HTML o texto; steps puede venir lleno tras parseo
            const how = product.howToUse || {};
            const steps = Array.isArray(how.steps) && how.steps.length > 0
              ? how.steps
              : (how.content ? [ { title: how.content } ] : []);

            instructionsContent.innerHTML = steps.map((instruction: any, instructionIndex: number) => `
                <div class="flex flex-row gap-5 items-center">
                    <h1 class="sm:text-[88px] text-[20px] font-bold text-[#D0CFCE] leading-none">${instructionIndex + 1}</h1>
                    <div class="flex flex-col gap-1">
                        <h1 class="sm:text-2xl text-d-secondary font-medium">${instruction.title || instruction.step_title || ''}</h1>
                    </div>
                </div>
            `).join('');
            // const instructionsRecomendations = document.getElementById('instructions-recomendations');
            // if (instructionsRecomendations) {
            //     instructionsRecomendations.innerHTML = how.recommendations || how.recomendations || '';
            // }
        };

        const init = () => {
            // Esperar a que la imagen se cargue completamente
            const image = document.getElementById('instructions-image') as HTMLImageElement;
            if (image) {
                if (image.complete) {
                    positionBullets();
                } else {
                    image.addEventListener('load', positionBullets);
                }
            }
            
            // Reposicionar bullets en resize
            window.addEventListener('resize', positionBullets);
            
            document.addEventListener('click', (event) => {
                const target = event.target;
                if (!(target instanceof Element)) return;
                const wrapper = target.closest('.bullet');
                const wrapperIngredients = target.closest('.ingredients-fill');
                const wrapperIngredientsClose = target.closest('.ingredients-close');
                const ingredients = document.querySelector('.ingredients');
                const ingredientsPanel = document.querySelector('.ingredients-panel');
                const ingredientsFill = document.querySelector('.ingredients-fill');
                
                if (wrapper) {
                    const dataIndex = wrapper.getAttribute('data-index');
                    if (dataIndex !== null) {
                        const index = parseInt(dataIndex); 
                                    
                        renderInstructions(index);
                        
                        const instructionsData = instructions[index];
                        const button = document.querySelector('.instructions-btn') as HTMLAnchorElement | null;
                        const productsLite = (window as any).productsLite || [];
                        const product = productsLite[index - 1];
                        if (button) {
                            const href = (product && product.handle) ? `/products/${product.handle}` : (instructionsData?.url || '#');
                            button.setAttribute('href', href);
                        }
                        
                        // Mostrar el modal con animación
                        ingredients?.classList.remove('hidden');
                        ingredients?.classList.add('flex');
                        
                        // Trigger de la animación de entrada
                        setTimeout(() => {
                            ingredientsPanel?.classList.add('ingredients-panel-enter');
                            ingredientsFill?.classList.add('ingredients-fill-enter');
                        }, 10);
                    }
                }
                
                if (wrapperIngredients || wrapperIngredientsClose) {
                    ingredientsPanel?.classList.remove('ingredients-panel-enter');
                    ingredientsPanel?.classList.add('ingredients-panel-exit');
                    ingredientsFill?.classList.remove('ingredients-fill-enter');
                    ingredientsFill?.classList.add('ingredients-fill-exit');
                    
                    setTimeout(() => {
                        ingredients?.classList.add('hidden');
                        ingredients?.classList.remove('flex');
                        // Limpiar las clases de animación
                        ingredientsPanel?.classList.remove('ingredients-panel-enter', 'ingredients-panel-exit');
                        ingredientsFill?.classList.remove('ingredients-fill-enter', 'ingredients-fill-exit');
                    }, 500);
                }
            });
        };

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init, { once: true });
        } else {
            init();
        }

        document.addEventListener('astro:page-load', init, { once: true });
        document.addEventListener('astro:after-swap', init, { once: true });
    })();
</script></script>
